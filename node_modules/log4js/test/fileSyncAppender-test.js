"use strict";function remove(e){try{fs.unlinkSync(e)}catch(s){}}var vows=require("vows"),fs=require("fs"),path=require("path"),sandbox=require("sandboxed-module"),log4js=require("../lib/log4js"),assert=require("assert"),EOL=require("os").EOL||"\n";log4js.clearAppenders(),vows.describe("log4js fileSyncAppender").addBatch({"with default fileSyncAppender settings":{topic:function(){var e=this,s=path.join(__dirname,"/fa-default-sync-test.log"),t=log4js.getLogger("default-settings");remove(s),log4js.clearAppenders(),log4js.addAppender(require("../lib/appenders/fileSync").appender(s),"default-settings"),t.info("This should be in the file."),fs.readFile(s,"utf8",e.callback)},"should write log messages to the file":function(e,s){assert.include(s,"This should be in the file."+EOL)},"log messages should be in the basic layout format":function(e,s){assert.match(s,/\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}\] \[INFO\] default-settings - /)}},"with a max file size and no backups":{topic:function(){var e=path.join(__dirname,"/fa-maxFileSize-sync-test.log"),s=log4js.getLogger("max-file-size"),t=this;remove(e),remove(e+".1"),log4js.clearAppenders(),log4js.addAppender(require("../lib/appenders/fileSync").appender(e,log4js.layouts.basicLayout,100,0),"max-file-size"),s.info("This is the first log message."),s.info("This is an intermediate log message."),s.info("This is the second log message."),fs.readFile(e,"utf8",t.callback)},"log file should only contain the second message":function(e,s){assert.include(s,"This is the second log message."+EOL),assert.equal(s.indexOf("This is the first log message."),-1)},"the number of files":{topic:function(){fs.readdir(__dirname,this.callback)},"starting with the test file name should be two":function(e,s){var t=s.filter(function(e){return e.indexOf("fa-maxFileSize-sync-test.log")>-1});assert.equal(t.length,2)}}},"with a max file size and 2 backups":{topic:function(){var e=path.join(__dirname,"/fa-maxFileSize-with-backups-sync-test.log"),s=log4js.getLogger("max-file-size-backups");remove(e),remove(e+".1"),remove(e+".2"),log4js.clearAppenders(),log4js.addAppender(require("../lib/appenders/fileSync").appender(e,log4js.layouts.basicLayout,50,2),"max-file-size-backups"),s.info("This is the first log message."),s.info("This is the second log message."),s.info("This is the third log message."),s.info("This is the fourth log message.");var t=this;fs.readdir(__dirname,function(e,s){s?t.callback(null,s.sort()):t.callback(e,s)})},"the log files":{topic:function(e){var s=e.filter(function(e){return e.indexOf("fa-maxFileSize-with-backups-sync-test.log")>-1});return s},"should be 3":function(e){assert.equal(e.length,3)},"should be named in sequence":function(e){assert.deepEqual(e,["fa-maxFileSize-with-backups-sync-test.log","fa-maxFileSize-with-backups-sync-test.log.1","fa-maxFileSize-with-backups-sync-test.log.2"])},"and the contents of the first file":{topic:function(e){fs.readFile(path.join(__dirname,e[0]),"utf8",this.callback)},"should be the last log message":function(e){assert.include(e,"This is the fourth log message.")}},"and the contents of the second file":{topic:function(e){fs.readFile(path.join(__dirname,e[1]),"utf8",this.callback)},"should be the third log message":function(e){assert.include(e,"This is the third log message.")}},"and the contents of the third file":{topic:function(e){fs.readFile(path.join(__dirname,e[2]),"utf8",this.callback)},"should be the second log message":function(e){assert.include(e,"This is the second log message.")}}}}}).addBatch({configure:{"with fileSyncAppender":{topic:function(){var e,s=require("../lib/log4js");s.configure({appenders:[{category:"tests",type:"file",filename:"tmp-sync-tests.log",layout:{type:"messagePassThrough"}}],levels:{tests:"WARN"}}),e=s.getLogger("tests"),e.info("this should not be written to the file"),e.warn("this should be written to the file"),fs.readFile("tmp-sync-tests.log","utf8",this.callback)},"should load appender configuration from a json file":function(e,s){assert.include(s,"this should be written to the file"+EOL),assert.equal(s.indexOf("this should not be written to the file"),-1)}}}})["export"](module);