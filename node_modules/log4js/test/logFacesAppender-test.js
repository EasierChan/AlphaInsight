"use strict";function setupLogging(e,r){var s={},t={createSocket:function(e){return{send:function(e,r,t,a,o,n){s.date=new Date,s.host=o,s.port=a,s.length=t,s.offset=0,s.buffer=e,n(void 0,t)}}}},a=sandbox.require("../lib/appenders/logFacesAppender",{requires:{dgram:t}});return log4js.clearAppenders(),log4js.addAppender(a.configure(r),e),{logger:log4js.getLogger(e),results:s}}var vows=require("vows"),assert=require("assert"),log4js=require("../lib/log4js"),sandbox=require("sandboxed-module");vows.describe("logFaces UDP appender").addBatch({"when logging to logFaces UDP receiver":{topic:function(){var e=setupLogging("myCategory",{type:"logFacesAppender",application:"LFS-TEST",remoteHost:"127.0.0.1",port:55201,layout:{type:"pattern",pattern:"%m"}});return e.logger.warn("Log event #1"),e},"an UDP packet should be sent":function(e){assert.equal(e.results.host,"127.0.0.1"),assert.equal(e.results.port,55201),assert.equal(e.results.offset,0);var r=JSON.parse(e.results.buffer.toString());assert.equal(r.a,"LFS-TEST"),assert.equal(r.m,"Log event #1"),assert.equal(r.g,"myCategory"),assert.equal(r.p,"WARN");var s=new Date(r.t);assert.equal(s.toISOString().substring(0,14),e.results.date.toISOString().substring(0,14))}},"when missing options":{topic:function(){var e=setupLogging("myLogger",{type:"logFacesAppender"});return e.logger.error("Log event #2"),e},"it sets some defaults":function(e){assert.equal(e.results.host,"127.0.0.1"),assert.equal(e.results.port,55201);var r=JSON.parse(e.results.buffer.toString());assert.equal(r.a,""),assert.equal(r.m,"Log event #2"),assert.equal(r.g,"myLogger"),assert.equal(r.p,"ERROR")}}})["export"](module);