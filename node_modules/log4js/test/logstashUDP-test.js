"use strict";function setupLogging(e,t){var r={},s={createSocket:function(e){return{send:function(e,t,s,o,a,g){r.date=new Date,r.host=a,r.port=o,r.length=s,r.offset=0,r.buffer=e,g(void 0,s)}}}},o=sandbox.require("../lib/appenders/logstashUDP",{requires:{dgram:s}});return log4js.clearAppenders(),log4js.addAppender(o.configure(t),e),{logger:log4js.getLogger(e),results:r}}var vows=require("vows"),assert=require("assert"),log4js=require("../lib/log4js"),sandbox=require("sandboxed-module");vows.describe("logstashUDP appender").addBatch({"when logging with logstash via UDP":{topic:function(){var e=setupLogging("myCategory",{host:"127.0.0.1",port:10001,type:"logstashUDP",logType:"myAppType",category:"myLogger",fields:{field1:"value1",field2:"value2"},layout:{type:"pattern",pattern:"%m"}});return e.logger.log("trace","Log event #1"),e},"an UDP packet should be sent":function(e){assert.equal(e.results.host,"127.0.0.1"),assert.equal(e.results.port,10001),assert.equal(e.results.offset,0);var t=JSON.parse(e.results.buffer.toString());assert.equal(t.type,"myAppType");var r={field1:"value1",field2:"value2",level:"TRACE"};assert.equal(JSON.stringify(t.fields),JSON.stringify(r)),assert.equal(t.message,"Log event #1");var s=new Date(t["@timestamp"]);assert.equal(s.toISOString().substring(0,14),e.results.date.toISOString().substring(0,14))}},"when missing some options":{topic:function(){var e=setupLogging("myLogger",{host:"127.0.0.1",port:10001,type:"logstashUDP",category:"myLogger",layout:{type:"pattern",pattern:"%m"}});return e.logger.log("trace","Log event #1"),e},"it sets some defaults":function(e){var t=JSON.parse(e.results.buffer.toString());assert.equal(t.type,"myLogger"),assert.equal(JSON.stringify(t.fields),JSON.stringify({level:"TRACE"}))}},"when extra fields provided":{topic:function(){var e=setupLogging("myLogger",{host:"127.0.0.1",port:10001,type:"logstashUDP",category:"myLogger",layout:{type:"dummy"}});return e.logger.log("trace","Log event #1",{extra1:"value1",extra2:"value2"}),e},"they should be added to fields structure":function(e){var t=JSON.parse(e.results.buffer.toString()),r={extra1:"value1",extra2:"value2",level:"TRACE"};assert.equal(JSON.stringify(t.fields),JSON.stringify(r))}}})["export"](module);