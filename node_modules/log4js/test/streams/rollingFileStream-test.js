"use strict";function remove(e){try{fs.unlinkSync(e)}catch(t){}}function create(e){fs.writeFileSync(e,"test file")}function write7Cheese(e,t){var i=0;[0,1,2,3,4,5,6].forEach(function(r){t.write(r+".cheese\n","utf8",function(r){return i++,r?e.callback(r):void(7===i&&(t.end(),e.callback()))})})}var vows=require("vows"),assert=require("assert"),events=require("events"),fs=require("fs"),semver=require("semver"),streams,RollingFileStream;streams=semver.satisfies(process.version,">=0.10.0")?require("stream"):require("readable-stream"),RollingFileStream=require("../../lib/streams").RollingFileStream,vows.describe("RollingFileStream").addBatch({arguments:{topic:function(){return remove(__dirname+"/test-rolling-file-stream"),new RollingFileStream("test-rolling-file-stream",1024,5)},"should take a filename, file size (bytes), no. backups,  return Writable":function(e){assert.instanceOf(e,streams.Writable),assert.equal(e.filename,"test-rolling-file-stream"),assert.equal(e.size,1024),assert.equal(e.backups,5)},"with default settings for the underlying stream":function(e){assert.equal(e.theStream.mode,420),assert.equal(e.theStream.flags,"a")}},"with stream arguments":{topic:function(){return remove(__dirname+"/test-rolling-file-stream"),new RollingFileStream("test-rolling-file-stream",1024,5,{mode:parseInt("0666",8)})},"should pass them to the underlying stream":function(e){assert.equal(e.theStream.mode,parseInt("0666",8))}},"without size":{topic:function(){try{new RollingFileStream(__dirname+"/test-rolling-file-stream")}catch(e){return e}},"should throw an error":function(e){assert.instanceOf(e,Error)}},"without number of backups":{topic:function(){return remove("test-rolling-file-stream"),new RollingFileStream(__dirname+"/test-rolling-file-stream",1024)},"should default to 1 backup":function(e){assert.equal(e.backups,1)}},"writing less than the file size":{topic:function(){remove(__dirname+"/test-rolling-file-stream-write-less");var e=this,t=new RollingFileStream(__dirname+"/test-rolling-file-stream-write-less",100);t.write("cheese","utf8",function(){t.end(),fs.readFile(__dirname+"/test-rolling-file-stream-write-less","utf8",e.callback)})},"should write to the file":function(e){assert.equal(e,"cheese")},"the number of files":{topic:function(){fs.readdir(__dirname,this.callback)},"should be one":function(e){assert.equal(e.filter(function(e){return e.indexOf("test-rolling-file-stream-write-less")>-1}).length,1)}}},"writing more than the file size":{topic:function(){remove(__dirname+"/test-rolling-file-stream-write-more"),remove(__dirname+"/test-rolling-file-stream-write-more.1");var e=this,t=new RollingFileStream(__dirname+"/test-rolling-file-stream-write-more",45);write7Cheese(e,t)},"the number of files":{topic:function(){fs.readdir(__dirname,this.callback)},"should be two":function(e){assert.equal(e.filter(function(e){return e.indexOf("test-rolling-file-stream-write-more")>-1}).length,2)}},"the first file":{topic:function(){fs.readFile(__dirname+"/test-rolling-file-stream-write-more","utf8",this.callback)},"should contain the last two log messages":function(e){assert.equal(e,"5.cheese\n6.cheese\n")}},"the second file":{topic:function(){fs.readFile(__dirname+"/test-rolling-file-stream-write-more.1","utf8",this.callback)},"should contain the first five log messages":function(e){assert.equal(e,"0.cheese\n1.cheese\n2.cheese\n3.cheese\n4.cheese\n")}}},"when many files already exist":{topic:function(){remove(__dirname+"/test-rolling-stream-with-existing-files.11"),remove(__dirname+"/test-rolling-stream-with-existing-files.20"),remove(__dirname+"/test-rolling-stream-with-existing-files.-1"),remove(__dirname+"/test-rolling-stream-with-existing-files.1.1"),remove(__dirname+"/test-rolling-stream-with-existing-files.1"),create(__dirname+"/test-rolling-stream-with-existing-files.11"),create(__dirname+"/test-rolling-stream-with-existing-files.20"),create(__dirname+"/test-rolling-stream-with-existing-files.-1"),create(__dirname+"/test-rolling-stream-with-existing-files.1.1"),create(__dirname+"/test-rolling-stream-with-existing-files.1");var e=this,t=new RollingFileStream(__dirname+"/test-rolling-stream-with-existing-files",45,5);write7Cheese(e,t)},"the files":{topic:function(){fs.readdir(__dirname,this.callback)},"should be rolled":function(e){assert.include(e,"test-rolling-stream-with-existing-files"),assert.include(e,"test-rolling-stream-with-existing-files.1"),assert.include(e,"test-rolling-stream-with-existing-files.2"),assert.include(e,"test-rolling-stream-with-existing-files.11"),assert.include(e,"test-rolling-stream-with-existing-files.20")}}}}).exportTo(module);