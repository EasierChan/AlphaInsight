"use strict";var assert=require("assert"),vows=require("vows"),layouts=require("../lib/layouts"),sandbox=require("sandboxed-module"),LoggingEvent=require("../lib/logger").LoggingEvent,cluster=require("cluster");vows.describe("log4js cluster appender").addBatch({"when in master mode":{topic:function(){var e,s,r=[],t=[],n={on:function(s,t){r.push(s),e=t},isMaster:!0,isWorker:!1},a={on:function(e,r){s=r},process:{pid:123},id:"workerid"},o=function(e){t.push(e)},i=sandbox.require("../lib/appenders/clustered",{requires:{cluster:n}}),g=i.appender({actualAppenders:[o,o,o],appenders:[{},{category:"test"},{category:"wovs"}]});g(new LoggingEvent("wovs","Info",["masterAppender test"])),e(a);var d=new LoggingEvent("wovs","Error",["message deserialization test",{stack:"my wrapped stack"}]);s({type:"::log-message",event:JSON.stringify(d)});var l={registeredClusterEvents:r,loggingEvents:t};return l},"should register 'fork' event listener on 'cluster'":function(e){assert.equal(e.registeredClusterEvents[0],"fork")},"should log using actual appender":function(e){assert.equal(e.loggingEvents.length,4),assert.equal(e.loggingEvents[0].data[0],"masterAppender test"),assert.equal(e.loggingEvents[1].data[0],"masterAppender test"),assert.equal(e.loggingEvents[2].data[0],"message deserialization test"),assert.equal(e.loggingEvents[2].data[1],"my wrapped stack"),assert.equal(e.loggingEvents[3].data[0],"message deserialization test"),assert.equal(e.loggingEvents[3].data[1],"my wrapped stack")}},"when in worker mode":{topic:function(){var e=[],s={isMaster:!1,isWorker:!0},r={send:function(s){e.push(s)}},t=sandbox.require("../lib/appenders/clustered",{requires:{cluster:s},globals:{process:r}}),n=t.appender();n(new LoggingEvent("wovs","Info",["workerAppender test"])),n(new LoggingEvent("wovs","Info",[new Error("Error test")]));var a={registeredProcessEvents:e};return a},"worker appender should call process.send":function(e){assert.equal(e.registeredProcessEvents[0].type,"::log-message"),assert.equal(JSON.parse(e.registeredProcessEvents[0].event).data[0],"workerAppender test")},"worker should serialize an Error correctly":function(e){assert.equal(e.registeredProcessEvents[1].type,"::log-message"),assert(JSON.parse(e.registeredProcessEvents[1].event).data[0].stack);var s=JSON.parse(e.registeredProcessEvents[1].event).data[0].stack,r=/^Error: Error test/;assert(s.match(r),"Expected: \n\n "+s+"\n\n to match "+r)}}}).exportTo(module);