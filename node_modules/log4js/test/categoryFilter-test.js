"use strict";function remove(e){try{fs.unlinkSync(e)}catch(t){}}var vows=require("vows"),fs=require("fs"),assert=require("assert"),EOL=require("os").EOL||"\n";vows.describe("log4js categoryFilter").addBatch({appender:{topic:function(){var e,t,r=require("../lib/log4js"),a=[];r.clearAppenders();var i=require("../lib/appenders/categoryFilter").appender(["app"],function(e){a.push(e)});return r.addAppender(i,["app","web"]),e=r.getLogger("web"),t=r.getLogger("app"),e.debug("This should get logged"),t.debug("This should not"),e.debug("Hello again"),r.getLogger("db").debug("This shouldn't be included by the appender anyway"),a},"should only pass matching category":function(e){assert.equal(e.length,2),assert.equal(e[0].data[0],"This should get logged"),assert.equal(e[1].data[0],"Hello again")}},configure:{topic:function(){var e,t,r=require("../lib/log4js");remove(__dirname+"/categoryFilter-web.log"),remove(__dirname+"/categoryFilter-noweb.log"),r.configure("test/with-categoryFilter.json"),e=r.getLogger("app"),t=r.getLogger("web"),e.info("Loading app"),e.debug("Initialising indexes"),t.info("00:00:00 GET / 200"),t.warn("00:00:00 GET / 500"),setTimeout(this.callback,500)},"tmp-tests.log":{topic:function(){fs.readFile(__dirname+"/categoryFilter-noweb.log","utf8",this.callback)},"should contain all log messages":function(e){var t=e.trim().split(EOL);assert.deepEqual(t,["Loading app","Initialising indexes"])}},"tmp-tests-web.log":{topic:function(){fs.readFile(__dirname+"/categoryFilter-web.log","utf8",this.callback)},"should contain only error and warning log messages":function(e){var t=e.trim().split(EOL);assert.deepEqual(t,["00:00:00 GET / 200","00:00:00 GET / 500"])}}}})["export"](module);