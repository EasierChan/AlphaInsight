"use strict";function setupLogging(e,s){var o=[],t={apiKey:s.apikey,domain:s.domain},n=function(e){return{messages:function(){return{config:s,send:function(e,s){o.push(e),s(!1,{status:"OK"})}}}}},a={layout:function(e,s){return this.type=e,this.config=s,log4js.layouts.messagePassThroughLayout},basicLayout:log4js.layouts.basicLayout,messagePassThroughLayout:log4js.layouts.messagePassThroughLayout},i={errors:[],logs:[],error:function(e,s){this.errors.push({msg:e,value:s})},log:function(e,s){this.logs.push({msg:e,value:s})}},r=sandbox.require("../lib/appenders/mailgun",{requires:{"mailgun-js":n,"../layouts":a},globals:{console:i}});return log4js.addAppender(r.configure(s),e),{logger:log4js.getLogger(e),mailer:n,layouts:a,console:i,mails:o,credentials:t}}function checkMessages(e){for(var s=0;s<e.mails.length;++s)assert.equal(e.mails[s].from,"sender@domain.com"),assert.equal(e.mails[s].to,"recepient@domain.com"),assert.equal(e.mails[s].subject,"This is subject"),assert.ok(new RegExp(".+Log event #"+(s+1)).test(e.mails[s].text))}var vows=require("vows"),assert=require("assert"),log4js=require("../lib/log4js"),sandbox=require("sandboxed-module");log4js.clearAppenders(),vows.describe("log4js mailgunAppender").addBatch({"mailgun setup":{topic:setupLogging("mailgun setup",{apikey:"APIKEY",domain:"DOMAIN",from:"sender@domain.com",to:"recepient@domain.com",subject:"This is subject"}),"mailgun credentials should match":function(e){assert.equal(e.credentials.apiKey,"APIKEY"),assert.equal(e.credentials.domain,"DOMAIN")}},"basic usage":{topic:function(){var e=setupLogging("basic usage",{apikey:"APIKEY",domain:"DOMAIN",from:"sender@domain.com",to:"recepient@domain.com",subject:"This is subject"});return e.logger.info("Log event #1"),e},"there should be one message only":function(e){assert.equal(e.mails.length,1)},"message should contain proper data":function(e){checkMessages(e)}},"config with layout":{topic:function(){var e=setupLogging("config with layout",{layout:{type:"tester"}});return e},"should configure layout":function(e){assert.equal(e.layouts.type,"tester")}},"error when sending email":{topic:function(){var e=setupLogging("separate email for each event",{apikey:"APIKEY",domain:"DOMAIN",from:"sender@domain.com",to:"recepient@domain.com",subject:"This is subject"});return e.mailer.messages=function(){return{send:function(e,s){s({msg:"log4js.mailgunAppender - Error happened"},null)}}},e.logger.info("This will break"),e.console},"should be logged to console":function(e){assert.equal(e.errors.length,1),assert.equal(e.errors[0].msg,"log4js.mailgunAppender - Error happened")}},"separate email for each event":{topic:function(){var e=this,s=setupLogging("separate email for each event",{apikey:"APIKEY",domain:"DOMAIN",from:"sender@domain.com",to:"recepient@domain.com",subject:"This is subject"});setTimeout(function(){s.logger.info("Log event #1")},0),setTimeout(function(){s.logger.info("Log event #2")},500),setTimeout(function(){s.logger.info("Log event #3")},1100),setTimeout(function(){e.callback(null,s)},3e3)},"there should be three messages":function(e){assert.equal(e.mails.length,3)},"messages should contain proper data":function(e){checkMessages(e)}}})["export"](module);