"use strict";function test(t,e,s){var o=t[0],a=t[1],n=t[2];assert.equal(o(e,n)(a),s)}var vows=require("vows"),assert=require("assert"),os=require("os"),semver=require("semver"),EOL=os.EOL||"\n";vows.describe("log4js layouts").addBatch({colouredLayout:{topic:function(){return require("../lib/layouts").colouredLayout},"should apply level colour codes to output":function(t){var e=t({data:["nonsense"],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"cheese",level:{toString:function(){return"ERROR"}}});assert.equal(e,"[31m[2010-12-05 14:18:30.045] [ERROR] cheese - [39mnonsense")},"should support the console.log format for the message":function(t){var e=t({data:["thing %d",2],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"cheese",level:{toString:function(){return"ERROR"}}});assert.equal(e,"[31m[2010-12-05 14:18:30.045] [ERROR] cheese - [39mthing 2")}},messagePassThroughLayout:{topic:function(){return require("../lib/layouts").messagePassThroughLayout},"should take a logevent and output only the message":function(t){assert.equal(t({data:["nonsense"],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"cheese",level:{colour:"green",toString:function(){return"ERROR"}}}),"nonsense")},"should support the console.log format for the message":function(t){assert.equal(t({data:["thing %d",1,"cheese"],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"cheese",level:{colour:"green",toString:function(){return"ERROR"}}}),"thing 1 cheese")},"should output the first item even if it is not a string":function(t){assert.equal(t({data:[{thing:1}],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"cheese",level:{colour:"green",toString:function(){return"ERROR"}}}),"{ thing: 1 }")},"should print the stacks of a passed error objects":function(t){assert.isArray(t({data:[new Error],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"cheese",level:{colour:"green",toString:function(){return"ERROR"}}}).match(/Error\s+at Object\..*\s+\((.*)test[\\\/]layouts-test\.js\:\d+\:\d+\)\s+at runTest/),"regexp did not return a match")},"with passed augmented errors":{topic:function(t){var e=new Error("My Unique Error Message");return e.augmented="My Unique attribute value",e.augObj={at1:"at2"},t({data:[e],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"cheese",level:{colour:"green",toString:function(){return"ERROR"}}})},"should print error the contained error message":function(t){var e=t.match(/Error: My Unique Error Message/);assert.isArray(e)},"should print error augmented string attributes":function(t){var e=t.match(/augmented:\s'My Unique attribute value'/);assert.isArray(e)},"should print error augmented object attributes":function(t){var e=t.match(/augObj:\s\{ at1: 'at2' \}/);assert.isArray(e)}}},basicLayout:{topic:function(){var t=require("../lib/layouts").basicLayout,e={data:["this is a test"],startTime:new Date(2010,11,5,14,18,30,45),categoryName:"tests",level:{toString:function(){return"DEBUG"}}};return[t,e]},"should take a logevent and output a formatted string":function(t){var e=t[0],s=t[1];assert.equal(e(s),"[2010-12-05 14:18:30.045] [DEBUG] tests - this is a test")},"should output a stacktrace, message if the event has an error attached":function(t){var e,s,o,a=t[0],n=t[1],r=new Error("Some made-up error"),u=r.stack.split(/\n/);if(n.data=["this is a test",r],s=a(n),o=s.split(/\n/),semver.satisfies(process.version,">=6"))for(assert.equal(o.length,u.length),assert.equal(o[0],"[2010-12-05 14:18:30.045] [DEBUG] tests - this is a test Error: Some made-up error"),e=1;e<u.length;e++)assert.equal(o[e],u[e]);else for(assert.equal(o.length-1,u.length),assert.equal(o[0],"[2010-12-05 14:18:30.045] [DEBUG] tests - this is a test [Error: Some made-up error]"),e=1;e<u.length;e++)assert.equal(o[e+2],u[e+1])},"should output any extra data in the log event as util.inspect strings":function(t){var e,s=t[0],o=t[1];o.data=["this is a test",{name:"Cheese",message:"Gorgonzola smells."}],e=s(o),assert.equal(e,"[2010-12-05 14:18:30.045] [DEBUG] tests - this is a test { name: 'Cheese', message: 'Gorgonzola smells.' }")}},patternLayout:{topic:function(){var t={data:["this is a test"],startTime:new Date("2010-12-05T14:18:30.045Z"),categoryName:"multiple.levels.of.tests",level:{toString:function(){return"DEBUG"}}},e=require("../lib/layouts").patternLayout,s={testString:"testStringToken",testFunction:function(){return"testFunctionToken"},fnThatUsesLogEvent:function(t){return t.level.toString()}};return t.startTime.getTimezoneOffset=function(){return 0},[e,t,s]},'should default to "time logLevel loggerName - message"':function(t){test(t,null,"14:18:30 DEBUG multiple.levels.of.tests - this is a test"+EOL)},"%r should output time only":function(t){test(t,"%r","14:18:30")},"%p should output the log level":function(t){test(t,"%p","DEBUG")},"%c should output the log category":function(t){test(t,"%c","multiple.levels.of.tests")},"%m should output the log data":function(t){test(t,"%m","this is a test")},"%n should output a new line":function(t){test(t,"%n",EOL)},"%h should output hostname":function(t){test(t,"%h",os.hostname().toString())},"%z should output pid":function(t){test(t,"%z",process.pid)},"%c should handle category names like java-style package names":function(t){test(t,"%c{1}","tests"),test(t,"%c{2}","of.tests"),test(t,"%c{3}","levels.of.tests"),test(t,"%c{4}","multiple.levels.of.tests"),test(t,"%c{5}","multiple.levels.of.tests"),test(t,"%c{99}","multiple.levels.of.tests")},"%d should output the date in ISO8601 format":function(t){test(t,"%d","2010-12-05 14:18:30.045")},"%d should allow for format specification":function(t){test(t,"%d{ISO8601_WITH_TZ_OFFSET}","2010-12-05T14:18:30-0000"),test(t,"%d{ISO8601}","2010-12-05 14:18:30.045"),test(t,"%d{ABSOLUTE}","14:18:30.045"),test(t,"%d{DATE}","05 12 2010 14:18:30.045"),test(t,"%d{yy MM dd hh mm ss}","10 12 05 14 18 30"),test(t,"%d{yyyy MM dd}","2010 12 05"),test(t,"%d{yyyy MM dd hh mm ss SSS}","2010 12 05 14 18 30 045")},"%% should output %":function(t){test(t,"%%","%")},"should output anything not preceded by % as literal":function(t){test(t,"blah blah blah","blah blah blah")},"should output the original string if no replacer matches the token":function(t){test(t,"%a{3}","a{3}")},"should handle complicated patterns":function(t){test(t,"%m%n %c{2} at %d{ABSOLUTE} cheese %p%n","this is a test"+EOL+" of.tests at 14:18:30.045 cheese DEBUG"+EOL)},"should truncate fields if specified":function(t){test(t,"%.4m","this"),test(t,"%.7m","this is"),test(t,"%.9m","this is a"),test(t,"%.14m","this is a test"),test(t,"%.2919102m","this is a test")},"should pad fields if specified":function(t){test(t,"%10p","     DEBUG"),test(t,"%8p","   DEBUG"),test(t,"%6p"," DEBUG"),test(t,"%4p","DEBUG"),test(t,"%-4p","DEBUG"),test(t,"%-6p","DEBUG "),test(t,"%-8p","DEBUG   "),test(t,"%-10p","DEBUG     ")},"%[%r%] should output colored time":function(t){test(t,"%[%r%]","[36m14:18:30[39m")},"%x{testString} should output the string stored in tokens":function(t){test(t,"%x{testString}","testStringToken")},"%x{testFunction} should output the result of the function stored in tokens":function(t){test(t,"%x{testFunction}","testFunctionToken")},"%x{doesNotExist} should output the string stored in tokens":function(t){test(t,"%x{doesNotExist}","null")},"%x{fnThatUsesLogEvent} should be able to use the logEvent":function(t){test(t,"%x{fnThatUsesLogEvent}","DEBUG")},"%x should output the string stored in tokens":function(t){test(t,"%x","null")}},"layout makers":{topic:require("../lib/layouts"),"should have a maker for each layout":function(t){assert.ok(t.layout("messagePassThrough")),assert.ok(t.layout("basic")),assert.ok(t.layout("colored")),assert.ok(t.layout("coloured")),assert.ok(t.layout("pattern"))}},"add layout":{topic:require("../lib/layouts"),"should be able to add a layout":function(t){t.addLayout("test_layout",function(t){return assert.equal(t,"test_config"),function(t){return"TEST LAYOUT >"+t.data}});var e=t.layout("test_layout","test_config");assert.ok(e),assert.equal(e({data:"INPUT"}),"TEST LAYOUT >INPUT")}}})["export"](module);