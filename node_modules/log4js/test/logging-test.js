"use strict";function setupConsoleTest(){var e,t={},s=[];return["trace","debug","log","info","warn","error"].forEach(function(e){t[e]=function(){throw new Error("this should not be called.")}}),e=sandbox.require("../lib/log4js",{globals:{console:t}}),e.clearAppenders(),e.addAppender(function(e){s.push(e)}),{log4js:e,logEvents:s,fakeConsole:t}}var vows=require("vows"),assert=require("assert"),sandbox=require("sandboxed-module");vows.describe("log4js").addBatch({getBufferedLogger:{topic:function(){var e=require("../lib/log4js");e.clearAppenders();var t=e.getBufferedLogger("tests");return t},"should take a category and return a logger":function(e){assert.equal(e.target.category,"tests"),assert.isFunction(e.flush),assert.isFunction(e.trace),assert.isFunction(e.debug),assert.isFunction(e.info),assert.isFunction(e.warn),assert.isFunction(e.error),assert.isFunction(e.fatal)},"cache events":{topic:function(){var e=require("../lib/log4js");e.clearAppenders();var t=e.getBufferedLogger("tests1"),s=[];return t.target.addListener("log",function(e){s.push(e)}),t.debug("Debug event"),t.trace("Trace event 1"),t.trace("Trace event 2"),t.warn("Warning event"),t.error("Aargh!",new Error("Pants are on fire!")),t.error("Simulated CouchDB problem",{err:127,cause:"incendiary underwear"}),s},"should not emit log events if .flush() is not called.":function(e){assert.equal(e.length,0)}},"log events after flush() is called":{topic:function(){var e=require("../lib/log4js");e.clearAppenders();var t=e.getBufferedLogger("tests2");t.target.setLevel("TRACE");var s=[];return t.target.addListener("log",function(e){s.push(e)}),t.debug("Debug event"),t.trace("Trace event 1"),t.trace("Trace event 2"),t.warn("Warning event"),t.error("Aargh!",new Error("Pants are on fire!")),t.error("Simulated CouchDB problem",{err:127,cause:"incendiary underwear"}),t.flush(),s},"should emit log events when .flush() is called.":function(e){assert.equal(e.length,6)}}},getLogger:{topic:function(){var e=require("../lib/log4js");e.clearAppenders();var t=e.getLogger("tests");return t.setLevel("DEBUG"),t},"should take a category and return a logger":function(e){assert.equal(e.category,"tests"),assert.equal(e.level.toString(),"DEBUG"),assert.isFunction(e.debug),assert.isFunction(e.info),assert.isFunction(e.warn),assert.isFunction(e.error),assert.isFunction(e.fatal)},"log events":{topic:function(e){var t=[];return e.addListener("log",function(e){t.push(e)}),e.debug("Debug event"),e.trace("Trace event 1"),e.trace("Trace event 2"),e.warn("Warning event"),e.error("Aargh!",new Error("Pants are on fire!")),e.error("Simulated CouchDB problem",{err:127,cause:"incendiary underwear"}),t},"should emit log events":function(e){assert.equal(e[0].level.toString(),"DEBUG"),assert.equal(e[0].data[0],"Debug event"),assert.instanceOf(e[0].startTime,Date)},"should not emit events of a lower level":function(e){assert.equal(e.length,4),assert.equal(e[1].level.toString(),"WARN")},"should include the error if passed in":function(e){assert.instanceOf(e[2].data[1],Error),assert.equal(e[2].data[1].message,"Pants are on fire!")}}},"when shutdown is called":{topic:function(){var e=this.callback,t={appenderShutdownCalled:!1,shutdownCallbackCalled:!1},s=sandbox.require("../lib/log4js",{requires:{"./appenders/file":{name:"file",appender:function(){},configure:function(e){return function(){}},shutdown:function(e){t.appenderShutdownCalled=!0,e()}}}}),n={appenders:[{type:"file",filename:"cheesy-wotsits.log",maxLogSize:1024,backups:3}]};s.configure(n),s.shutdown(function(){t.shutdownCallbackCalled=!0,require("../lib/logger").enableAllLogWrites(),e(null,t)})},"should invoke appender shutdowns":function(e){assert.ok(e.appenderShutdownCalled)},"should call callback":function(e){assert.ok(e.shutdownCallbackCalled)}},"invalid configuration":{"should throw an exception":function(){assert["throws"](function(){require("log4js").configure({type:"invalid"})})}},"configuration when passed as object":{topic:function(){var e,t=sandbox.require("../lib/log4js",{requires:{"./appenders/file":{name:"file",appender:function(){},configure:function(t){return e=t,function(){}}}}}),s={appenders:[{type:"file",filename:"cheesy-wotsits.log",maxLogSize:1024,backups:3}]};return t.configure(s),e},"should be passed to appender config":function(e){assert.equal(e.filename,"cheesy-wotsits.log")}},"configuration that causes an error":{topic:function(){var e=sandbox.require("../lib/log4js",{requires:{"./appenders/file":{name:"file",appender:function(){},configure:function(e){throw new Error("oh noes")}}}}),t={appenders:[{type:"file",filename:"cheesy-wotsits.log",maxLogSize:1024,backups:3}]};try{e.configure(t)}catch(s){return s}},"should wrap error in a meaningful message":function(e){assert.ok(e.message.indexOf("log4js configuration problem for")>-1)}},"configuration when passed as filename":{topic:function(){var e,t,s=sandbox.require("../lib/log4js",{requires:{fs:{statSync:function(){return{mtime:Date.now()}},readFileSync:function(e){return t=e,JSON.stringify({appenders:[{type:"file",filename:"whatever.log"}]})},readdirSync:function(){return["file"]}},"./appenders/file":{name:"file",appender:function(){},configure:function(t){return e=t,function(){}}}}});return s.configure("/path/to/cheese.json"),[t,e]},"should read the config from a file":function(e){assert.equal(e[0],"/path/to/cheese.json")},"should pass config to appender":function(e){assert.equal(e[1].filename,"whatever.log")}},"with no appenders defined":{topic:function(){var e,t=this,s={name:"console",appender:function(){return function(e){t.callback(null,e)}},configure:function(){return s.appender()}},n=sandbox.require("../lib/log4js",{requires:{"./appenders/console":s}});e=n.getLogger("some-logger"),e.debug("This is a test")},"should default to the console appender":function(e){assert.equal(e.data[0],"This is a test")}},addAppender:{topic:function(){var e=require("../lib/log4js");return e.clearAppenders(),e},"without a category":{"should register the function as a listener for all loggers":function(e){var t,s=function(e){t=e},n=e.getLogger("tests");e.addAppender(s),n.debug("This is a test"),assert.equal(t.data[0],"This is a test"),assert.equal(t.categoryName,"tests"),assert.equal(t.level.toString(),"DEBUG")},"if an appender for a category is defined":{"should register for that category":function(e){var t,s,n;e.addAppender(function(e){s=e}),e.addAppender(function(e){t=e},"cheese"),n=e.getLogger("cheese"),n.debug("This is a test"),assert.deepEqual(s,t),assert.equal(t.data[0],"This is a test"),assert.equal(t.categoryName,"cheese"),t=void 0,s=void 0,e.getLogger("pants").debug("this should not be propagated to otherEvent"),assert.isUndefined(t),assert.equal(s.data[0],"this should not be propagated to otherEvent")}}},"with a category":{"should only register the function as a listener for that category":function(e){var t,s=function(e){t=e},n=e.getLogger("tests");e.addAppender(s,"tests"),n.debug("this is a category test"),assert.equal(t.data[0],"this is a category test"),t=void 0,e.getLogger("some other category").debug("Cheese"),assert.isUndefined(t)}},"with multiple categories":{"should register the function as a listener for all the categories":function(e){var t,s=function(e){t=e},n=e.getLogger("tests");e.addAppender(s,"tests","biscuits"),n.debug("this is a test"),assert.equal(t.data[0],"this is a test"),t=void 0;var r=e.getLogger("biscuits");r.debug("mmm... garibaldis"),assert.equal(t.data[0],"mmm... garibaldis"),t=void 0,e.getLogger("something else").debug("pants"),assert.isUndefined(t)},"should register the function when the list of categories is an array":function(e){var t,s=function(e){t=e};e.addAppender(s,["tests","pants"]),e.getLogger("tests").debug("this is a test"),assert.equal(t.data[0],"this is a test"),t=void 0,e.getLogger("pants").debug("big pants"),assert.equal(t.data[0],"big pants"),t=void 0,e.getLogger("something else").debug("pants"),assert.isUndefined(t)}}},"default setup":{topic:function(){var e=[],t={name:"console",appender:function(){return function(t){e.push(t)}},configure:function(e){return t.appender()}},s={log:function(){}},n=sandbox.require("../lib/log4js",{requires:{"./appenders/console":t},globals:{console:s}}),r=n.getLogger("a-test");return r.debug("this is a test"),s.log("this should not be logged"),e},"should configure a console appender":function(e){assert.equal(e[0].data[0],"this is a test")},"should not replace console.log with log4js version":function(e){assert.equal(e.length,1)}},console:{topic:setupConsoleTest,"when replaceConsole called":{topic:function(e){return e.log4js.replaceConsole(),e.fakeConsole.log("Some debug message someone put in a module"),e.fakeConsole.debug("Some debug"),e.fakeConsole.error("An error"),e.fakeConsole.info("some info"),e.fakeConsole.warn("a warning"),e.fakeConsole.log("cheese (%s) and biscuits (%s)","gouda","garibaldis"),e.fakeConsole.log({lumpy:"tapioca"}),e.fakeConsole.log("count %d",123),e.fakeConsole.log("stringify %j",{lumpy:"tapioca"}),e.logEvents},"should replace console.log methods with log4js ones":function(e){assert.equal(e.length,9),assert.equal(e[0].data[0],"Some debug message someone put in a module"),assert.equal(e[0].level.toString(),"INFO"),assert.equal(e[1].data[0],"Some debug"),assert.equal(e[1].level.toString(),"DEBUG"),assert.equal(e[2].data[0],"An error"),assert.equal(e[2].level.toString(),"ERROR"),assert.equal(e[3].data[0],"some info"),assert.equal(e[3].level.toString(),"INFO"),assert.equal(e[4].data[0],"a warning"),assert.equal(e[4].level.toString(),"WARN"),assert.equal(e[5].data[0],"cheese (%s) and biscuits (%s)"),assert.equal(e[5].data[1],"gouda"),assert.equal(e[5].data[2],"garibaldis")}},"when turned off":{topic:function(e){e.log4js.restoreConsole();try{e.fakeConsole.log("This should cause the error described in the setup")}catch(t){return t}},"should call the original console methods":function(e){assert.instanceOf(e,Error),assert.equal(e.message,"this should not be called.")}}},"console configuration":{topic:setupConsoleTest,"when disabled":{topic:function(e){e.log4js.replaceConsole(),e.log4js.configure({replaceConsole:!1});try{e.fakeConsole.log("This should cause the error described in the setup")}catch(t){return t}},"should allow for turning off console replacement":function(e){assert.instanceOf(e,Error),assert.equal(e.message,"this should not be called.")}},"when enabled":{topic:function(e){return e.log4js.restoreConsole(),e.log4js.configure({replaceConsole:!0}),e.log4js.addAppender(function(t){e.logEvents.push(t)}),e.fakeConsole.debug("Some debug"),e.logEvents},"should allow for turning on console replacement":function(e){assert.equal(e.length,1),assert.equal(e[0].level.toString(),"DEBUG"),assert.equal(e[0].data[0],"Some debug")}}},"configuration persistence":{topic:function(){var e,t,s=require("../lib/log4js");return s.clearAppenders(),s.addAppender(function(t){e=t}),t=require("../lib/log4js"),t.getLogger().info("This should go to the appender defined in firstLog4js"),e},"should maintain appenders between requires":function(e){assert.equal(e.data[0],"This should go to the appender defined in firstLog4js")}},getDefaultLogger:{topic:function(){return require("../lib/log4js").getDefaultLogger()},"should return a logger":function(e){assert.ok(e.info),assert.ok(e.debug),assert.ok(e.error)}}})["export"](module);