"use strict";function makeTestAppender(){return{configure:function(e,n){return this.configureCalled=!0,this.config=e,this.options=n,this.appender()},appender:function(){var e=this;return function(n){e.logEvt=n}}}}var assert=require("assert"),vows=require("vows"),sandbox=require("sandboxed-module");vows.describe("log4js configure").addBatch({appenders:{"when specified by type":{topic:function(){var e=makeTestAppender(),n=sandbox.require("../lib/log4js",{requires:{"./appenders/cheese":e}});return n.configure({appenders:[{type:"cheese",flavour:"gouda"}]},{pants:"yes"}),e},"should load appender":function(e){assert.ok(e.configureCalled)},"should pass config to appender":function(e){assert.equal(e.config.flavour,"gouda")},"should pass log4js options to appender":function(e){assert.equal(e.options.pants,"yes")}},"when core appender loaded via loadAppender":{topic:function(){var e=makeTestAppender(),n=sandbox.require("../lib/log4js",{requires:{"./appenders/cheese":e}});return n.loadAppender("cheese"),n},"should load appender from ../lib/appenders":function(e){assert.ok(e.appenders.cheese)},"should add appender configure function to appenderMakers":function(e){assert.isFunction(e.appenderMakers.cheese)}},"when appender in node_modules loaded via loadAppender":{topic:function(){var e=makeTestAppender(),n=sandbox.require("../lib/log4js",{requires:{"some/other/external":e}});return n.loadAppender("some/other/external"),n},"should load appender via require":function(e){assert.ok(e.appenders["some/other/external"])},"should add appender configure function to appenderMakers":function(e){assert.isFunction(e.appenderMakers["some/other/external"])}},"when appender object loaded via loadAppender":{topic:function(){var e=makeTestAppender(),n=sandbox.require("../lib/log4js");return n.loadAppender("some/other/external",e),n},"should load appender with provided object":function(e){assert.ok(e.appenders["some/other/external"])},"should add appender configure function to appenderMakers":function(e){assert.isFunction(e.appenderMakers["some/other/external"])}},"when configuration file loaded via LOG4JS_CONFIG environment variable":{topic:function(){process.env.LOG4JS_CONFIG="some/path/to/mylog4js.json";var e=0,n="some/path/to/mylog4js.json",r=[],o=new Date,s={config:{appenders:[{type:"console",layout:{type:"messagePassThrough"}}],levels:{"a-test":"INFO"}},readdirSync:function(e){return require("fs").readdirSync(e)},readFileSync:function(r,o){return e+=1,assert.isString(r),assert.equal(r,n),assert.equal(o,"utf8"),JSON.stringify(s.config)},statSync:function(e){if(r.push(e),e===n)return{mtime:o};throw new Error("no such file")}};sandbox.require("../lib/log4js",{requires:{fs:s}});return delete process.env.LOG4JS_CONFIG,e},"should load the specified local configuration file":function(e){assert.equal(e,1)}}}}).exportTo(module);