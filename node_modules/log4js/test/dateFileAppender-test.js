"use strict";function removeFile(e){return function(){fs.unlink(path.join(__dirname,e),function(t){t&&console.log("Could not delete ",e,t)})}}var vows=require("vows"),assert=require("assert"),path=require("path"),fs=require("fs"),sandbox=require("sandboxed-module"),log4js=require("../lib/log4js"),EOL=require("os").EOL||"\n";vows.describe("../lib/appenders/dateFile").addBatch({appender:{"adding multiple dateFileAppenders":{topic:function(){for(var e,t=process.listeners("exit").length,i=require("../lib/appenders/dateFile"),n=5;n--;)e=path.join(__dirname,"datefa-default-test"+n+".log"),log4js.addAppender(i.appender(e));return t},teardown:function(){removeFile("datefa-default-test0.log")(),removeFile("datefa-default-test1.log")(),removeFile("datefa-default-test2.log")(),removeFile("datefa-default-test3.log")(),removeFile("datefa-default-test4.log")()},"should only add one `exit` listener":function(e){assert.equal(process.listeners("exit").length,e+1)}},"exit listener":{topic:function(){for(var e,t=[],i=sandbox.require("../lib/appenders/dateFile",{globals:{process:{on:function(t,i){e=i}}},requires:{"../streams":{DateRollingFileStream:function(e){t.push(e),this.end=function(){t.shift()}}}}}),n=0;5>n;n+=1)i.appender("test"+n);return assert.isNotEmpty(t),e(),t},"should close all open files":function(e){assert.isEmpty(e)}},"with default settings":{topic:function(){var e=this,t=path.join(__dirname,"date-appender-default.log"),i=require("../lib/appenders/dateFile").appender(t),n=log4js.getLogger("default-settings");log4js.clearAppenders(),log4js.addAppender(i,"default-settings"),n.info("This should be in the file."),setTimeout(function(){fs.readFile(t,"utf8",e.callback)},100)},teardown:removeFile("date-appender-default.log"),"should write to the file":function(e){assert.include(e,"This should be in the file")},"should use the basic layout":function(e){assert.match(e,/\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}\] \[INFO\] default-settings - /)}}}}).addBatch({configure:{"with dateFileAppender":{topic:function(){var e,t=require("../lib/log4js");t.configure("test/with-dateFile.json"),e=t.getLogger("tests"),e.info("this should not be written to the file"),e.warn("this should be written to the file"),fs.readFile(path.join(__dirname,"date-file-test.log"),"utf8",this.callback)},teardown:removeFile("date-file-test.log"),"should load appender configuration from a json file":function(e,t){if(e)throw e;assert.include(t,"this should be written to the file"+EOL),assert.equal(t.indexOf("this should not be written to the file"),-1)}},"with options.alwaysIncludePattern":{topic:function(){var e,t=this,i=require("../lib/log4js"),n=require("../lib/date_format"),a={appenders:[{category:"tests",type:"dateFile",filename:"test/date-file-test",pattern:"-from-MM-dd.log",alwaysIncludePattern:!0,layout:{type:"messagePassThrough"}}]},o=n.asString(a.appenders[0].pattern,new Date);fs.writeFileSync(path.join(__dirname,"date-file-test"+o),"this is existing data"+EOL,"utf8"),i.clearAppenders(),i.configure(a),e=i.getLogger("tests"),e.warn("this should be written to the file with the appended date"),this.teardown=removeFile("date-file-test"+o),setTimeout(function(){fs.readFile(path.join(__dirname,"date-file-test"+o),"utf8",t.callback)},100)},"should create file with the correct pattern":function(e){assert.include(e,"this should be written to the file with the appended date")},"should not overwrite the file on open (bug found in issue #132)":function(e){assert.include(e,"this is existing data")}},"with cwd option":{topic:function(){var e,t=sandbox.require("../lib/appenders/dateFile",{requires:{"../streams":{DateRollingFileStream:function(t){return e=t,{on:function(){},end:function(){}}}}}});return t.configure({filename:"whatever.log",maxLogSize:10},{cwd:"/absolute/path/to"}),e},"should prepend options.cwd to config.filename":function(e){var t=path.sep+path.join("absolute","path","to","whatever.log");assert.equal(e,t)}}}}).exportTo(module);