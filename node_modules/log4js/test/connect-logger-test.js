"use strict";function MockLogger(){var e=this;this.messages=[],this.log=function(t,s,o){e.messages.push({level:t,message:s})},this.isLevelEnabled=function(t){return t.isGreaterThanOrEqualTo(e.level)},this.level=levels.TRACE}function MockRequest(e,t,s,o){this.socket={remoteAddress:e},this.originalUrl=s,this.method=t,this.httpVersionMajor="5",this.httpVersionMinor="0",this.headers=o||{};var l=this;Object.keys(this.headers).forEach(function(e){l.headers[e.toLowerCase()]=l.headers[e]})}function MockResponse(){var e=this;this.end=function(t,s){e.emit("finish")},this.writeHead=function(e,t){this.statusCode=e,this._headers=t}}function request(e,t,s,o,l,n){var r=new MockRequest("my.remote.addr",t,s,l),a=new MockResponse;e(r,a,function(){}),a.writeHead(o,n),a.end("chunk","encoding")}var vows=require("vows"),assert=require("assert"),util=require("util"),EE=require("events").EventEmitter,levels=require("../lib/levels");util.inherits(MockResponse,EE),vows.describe("log4js connect logger").addBatch({getConnectLoggerModule:{topic:function(){var e=require("../lib/connect-logger");return e},'should return a "connect logger" factory':function(e){assert.isObject(e)},'take a log4js logger and return a "connect logger"':{topic:function(e){var t=new MockLogger,s=e.connectLogger(t);return s},'should return a "connect logger"':function(e){assert.isFunction(e)}},"log events":{topic:function(e){var t=new MockLogger,s=e.connectLogger(t),o=this.callback;request(s,"GET","http://url",200),setTimeout(function(){o(null,t.messages)},10)},"check message":function(e){assert.isArray(e),assert.equal(e.length,1),assert.ok(levels.INFO.isEqualTo(e[0].level)),assert.include(e[0].message,"GET"),assert.include(e[0].message,"http://url"),assert.include(e[0].message,"my.remote.addr"),assert.include(e[0].message,"200")}},"log events with level below logging level":{topic:function(e){var t=new MockLogger;t.level=levels.FATAL;var s=e.connectLogger(t);return request(s,"GET","http://url",200),t.messages},"check message":function(e){assert.isArray(e),assert.isEmpty(e)}},"log events with non-default level and custom format":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,{level:levels.INFO,format:":method :url"});request(o,"GET","http://url",200),setTimeout(function(){s(null,t.messages)},10)},"check message":function(e){assert.isArray(e),assert.equal(e.length,1),assert.ok(levels.INFO.isEqualTo(e[0].level)),assert.equal(e[0].message,"GET http://url")}},"logger with options as string":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,":method :url");request(o,"POST","http://meh",200),setTimeout(function(){s(null,t.messages)},10)},"should use the passed in format":function(e){assert.equal(e[0].message,"POST http://meh")}},"auto log levels":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,{level:"auto",format:":method :url"});request(o,"GET","http://meh",200),request(o,"GET","http://meh",201),request(o,"GET","http://meh",302),request(o,"GET","http://meh",404),request(o,"GET","http://meh",500),setTimeout(function(){s(null,t.messages)},10)},"should use INFO for 2xx":function(e){assert.ok(levels.INFO.isEqualTo(e[0].level)),assert.ok(levels.INFO.isEqualTo(e[1].level))},"should use WARN for 3xx":function(e){assert.ok(levels.WARN.isEqualTo(e[2].level))},"should use ERROR for 4xx":function(e){assert.ok(levels.ERROR.isEqualTo(e[3].level))},"should use ERROR for 5xx":function(e){assert.ok(levels.ERROR.isEqualTo(e[4].level))}},"format using a function":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,function(e,t,s){return"I was called"});request(o,"GET","http://blah",200),setTimeout(function(){s(null,t.messages)},10)},"should call the format function":function(e){assert.equal(e[0].message,"I was called")}},"format that includes request headers":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,":req[Content-Type]");request(o,"GET","http://blah",200,{"Content-Type":"application/json"}),setTimeout(function(){s(null,t.messages)},10)},"should output the request header":function(e){assert.equal(e[0].message,"application/json")}},"format that includes response headers":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,":res[Content-Type]");request(o,"GET","http://blah",200,null,{"Content-Type":"application/cheese"}),setTimeout(function(){s(null,t.messages)},10)},"should output the response header":function(e){assert.equal(e[0].message,"application/cheese")}},"log events with custom token":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,{level:levels.INFO,format:":method :url :custom_string",tokens:[{token:":custom_string",replacement:"fooBAR"}]});request(o,"GET","http://url",200),setTimeout(function(){s(null,t.messages)},10)},"check message":function(e){assert.isArray(e),assert.equal(e.length,1),assert.ok(levels.INFO.isEqualTo(e[0].level)),assert.equal(e[0].message,"GET http://url fooBAR")}},"log events with custom override token":{topic:function(e){var t=new MockLogger,s=this.callback;t.level=levels.INFO;var o=e.connectLogger(t,{level:levels.INFO,format:":method :url :date",tokens:[{token:":date",replacement:"20150310"}]});request(o,"GET","http://url",200),setTimeout(function(){s(null,t.messages)},10)},"check message":function(e){assert.isArray(e),assert.equal(e.length,1),assert.ok(levels.INFO.isEqualTo(e[0].level)),assert.equal(e[0].message,"GET http://url 20150310")}}}})["export"](module);