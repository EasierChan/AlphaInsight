"use strict";function setupLogging(t,s){var e=[],g={createClient:function(t){return{config:t,log:function(t,s){e.push({msg:t,tags:s})}}}},o={layout:function(t,s){return this.type=t,this.config=s,log4js.layouts.messagePassThroughLayout},basicLayout:log4js.layouts.basicLayout,messagePassThroughLayout:log4js.layouts.messagePassThroughLayout},a={errors:[],error:function(t,s){this.errors.push({msg:t,value:s})}},r=sandbox.require("../lib/appenders/loggly",{requires:{loggly:g,"../layouts":o},globals:{console:a}});return log4js.addAppender(r.configure(s),t),{logger:log4js.getLogger(t),loggly:g,layouts:o,console:a,results:e}}function setupTaggedLogging(){return setupLogging("loggly",{token:"your-really-long-input-token",subdomain:"your-subdomain",tags:["loggly-tag1","loggly-tag2","loggly-tagn"]})}var vows=require("vows"),assert=require("assert"),log4js=require("../lib/log4js"),sandbox=require("sandboxed-module");log4js.clearAppenders(),vows.describe("log4js logglyAppender").addBatch({"with minimal config":{topic:function(){var t=setupTaggedLogging();return t.logger.log("trace","Log event #1","Log 2",{tags:["tag1","tag2"]}),t},"has a results.length of 1":function(t){assert.equal(t.results.length,1)},"has a result msg with both args concatenated":function(t){assert.equal(t.results[0].msg.msg,"Log event #1 Log 2")},"has a result tags with the arg that contains tags":function(t){assert.deepEqual(t.results[0].tags,["tag1","tag2"])}}}).addBatch({"config with object with tags and other keys":{topic:function(){var t=setupTaggedLogging();return t.logger.log("trace","Log event #1",{other:"other",tags:["tag1","tag2"]}),t},"has a results.length of 1":function(t){assert.equal(t.results.length,1)},"has a result msg with the args concatenated":function(t){assert.equal(t.results[0].msg.msg,"Log event #1 { other: 'other', tags: [ 'tag1', 'tag2' ] }")},"has a result tags with the arg that contains no tags":function(t){assert.deepEqual(t.results[0].tags,[])}}})["export"](module);