"use strict";function assertThat(e){function l(l,s,a){a.forEach(function(a){l.call(assert,s.call(e,a))})}return{isLessThanOrEqualTo:function(s){l(assert.isTrue,e.isLessThanOrEqualTo,s)},isNotLessThanOrEqualTo:function(s){l(assert.isFalse,e.isLessThanOrEqualTo,s)},isGreaterThanOrEqualTo:function(s){l(assert.isTrue,e.isGreaterThanOrEqualTo,s)},isNotGreaterThanOrEqualTo:function(s){l(assert.isFalse,e.isGreaterThanOrEqualTo,s)},isEqualTo:function(s){l(assert.isTrue,e.isEqualTo,s)},isNotEqualTo:function(s){l(assert.isFalse,e.isEqualTo,s)}}}var vows=require("vows"),assert=require("assert"),levels=require("../lib/levels");vows.describe("levels").addBatch({values:{topic:levels,"should define some levels":function(e){assert.isNotNull(e.ALL),assert.isNotNull(e.TRACE),assert.isNotNull(e.DEBUG),assert.isNotNull(e.INFO),assert.isNotNull(e.WARN),assert.isNotNull(e.ERROR),assert.isNotNull(e.FATAL),assert.isNotNull(e.MARK),assert.isNotNull(e.OFF)},ALL:{topic:levels.ALL,"should be less than the other levels":function(e){assertThat(e).isLessThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])},"should be greater than no levels":function(e){assertThat(e).isNotGreaterThanOrEqualTo([levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])},"should only be equal to ALL":function(e){assertThat(e).isEqualTo([levels.toLevel("ALL")]),assertThat(e).isNotEqualTo([levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])}},TRACE:{topic:levels.TRACE,"should be less than DEBUG":function(e){assertThat(e).isLessThanOrEqualTo([levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF]),assertThat(e).isNotLessThanOrEqualTo([levels.ALL])},"should be greater than ALL":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE]),assertThat(e).isNotGreaterThanOrEqualTo([levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])},"should only be equal to TRACE":function(e){assertThat(e).isEqualTo([levels.toLevel("TRACE")]),assertThat(e).isNotEqualTo([levels.ALL,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])}},DEBUG:{topic:levels.DEBUG,"should be less than INFO":function(e){assertThat(e).isLessThanOrEqualTo([levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF]),assertThat(e).isNotLessThanOrEqualTo([levels.ALL,levels.TRACE])},"should be greater than TRACE":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE]),assertThat(e).isNotGreaterThanOrEqualTo([levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])},"should only be equal to DEBUG":function(e){assertThat(e).isEqualTo([levels.toLevel("DEBUG")]),assertThat(e).isNotEqualTo([levels.ALL,levels.TRACE,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])}},INFO:{topic:levels.INFO,"should be less than WARN":function(e){assertThat(e).isLessThanOrEqualTo([levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF]),assertThat(e).isNotLessThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG])},"should be greater than DEBUG":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG]),assertThat(e).isNotGreaterThanOrEqualTo([levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])},"should only be equal to INFO":function(e){assertThat(e).isEqualTo([levels.toLevel("INFO")]),assertThat(e).isNotEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])}},WARN:{topic:levels.WARN,"should be less than ERROR":function(e){assertThat(e).isLessThanOrEqualTo([levels.ERROR,levels.FATAL,levels.MARK,levels.OFF]),assertThat(e).isNotLessThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO])},"should be greater than INFO":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO]),assertThat(e).isNotGreaterThanOrEqualTo([levels.ERROR,levels.FATAL,levels.MARK,levels.OFF])},"should only be equal to WARN":function(e){assertThat(e).isEqualTo([levels.toLevel("WARN")]),assertThat(e).isNotEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.ERROR,levels.FATAL,levels.OFF])}},ERROR:{topic:levels.ERROR,"should be less than FATAL":function(e){assertThat(e).isLessThanOrEqualTo([levels.FATAL,levels.MARK,levels.OFF]),assertThat(e).isNotLessThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN])},"should be greater than WARN":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN]),assertThat(e).isNotGreaterThanOrEqualTo([levels.FATAL,levels.MARK,levels.OFF])},"should only be equal to ERROR":function(e){assertThat(e).isEqualTo([levels.toLevel("ERROR")]),assertThat(e).isNotEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.FATAL,levels.MARK,levels.OFF])}},FATAL:{topic:levels.FATAL,"should be less than OFF":function(e){assertThat(e).isLessThanOrEqualTo([levels.MARK,levels.OFF]),assertThat(e).isNotLessThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR])},"should be greater than ERROR":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR]),assertThat(e).isNotGreaterThanOrEqualTo([levels.MARK,levels.OFF])},"should only be equal to FATAL":function(e){assertThat(e).isEqualTo([levels.toLevel("FATAL")]),assertThat(e).isNotEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.MARK,levels.OFF])}},MARK:{topic:levels.MARK,"should be less than OFF":function(e){assertThat(e).isLessThanOrEqualTo([levels.OFF]),assertThat(e).isNotLessThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.FATAL,levels.ERROR])},"should be greater than FATAL":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL]),assertThat(e).isNotGreaterThanOrEqualTo([levels.OFF])},"should only be equal to MARK":function(e){assertThat(e).isEqualTo([levels.toLevel("MARK")]),assertThat(e).isNotEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.OFF])}},OFF:{topic:levels.OFF,"should not be less than anything":function(e){assertThat(e).isNotLessThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK])},"should be greater than everything":function(e){assertThat(e).isGreaterThanOrEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK])},"should only be equal to OFF":function(e){assertThat(e).isEqualTo([levels.toLevel("OFF")]),assertThat(e).isNotEqualTo([levels.ALL,levels.TRACE,levels.DEBUG,levels.INFO,levels.WARN,levels.ERROR,levels.FATAL,levels.MARK])}}},isGreaterThanOrEqualTo:{topic:levels.INFO,"should handle string arguments":function(e){assertThat(e).isGreaterThanOrEqualTo(["all","trace","debug"]),assertThat(e).isNotGreaterThanOrEqualTo(["warn","ERROR","Fatal","MARK","off"])}},isLessThanOrEqualTo:{topic:levels.INFO,"should handle string arguments":function(e){assertThat(e).isNotLessThanOrEqualTo(["all","trace","debug"]),assertThat(e).isLessThanOrEqualTo(["warn","ERROR","Fatal","MARK","off"])}},isEqualTo:{topic:levels.INFO,"should handle string arguments":function(e){assertThat(e).isEqualTo(["info","INFO","iNfO"])}},toLevel:{"with lowercase argument":{topic:levels.toLevel("debug"),"should take the string and return the corresponding level":function(e){assert.equal(e,levels.DEBUG)}},"with uppercase argument":{topic:levels.toLevel("DEBUG"),"should take the string and return the corresponding level":function(e){assert.equal(e,levels.DEBUG)}},"with varying case":{topic:levels.toLevel("DeBuG"),"should take the string and return the corresponding level":function(e){assert.equal(e,levels.DEBUG)}},"with unrecognised argument":{topic:levels.toLevel("cheese"),"should return undefined":function(e){assert.isUndefined(e)}},"with unrecognised argument and default value":{topic:levels.toLevel("cheese",levels.DEBUG),"should return default value":function(e){assert.equal(e,levels.DEBUG)}}}})["export"](module);