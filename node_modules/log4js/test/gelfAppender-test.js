"use strict";var vows=require("vows"),assert=require("assert"),sandbox=require("sandboxed-module"),log4js=require("../lib/log4js"),realLayouts=require("../lib/layouts"),setupLogging=function(e,s,t){var o,r={sent:!1,socket:{packetLength:0,closed:!1,close:function(){this.closed=!0},send:function(e,s,t,o,n){r.sent=!0,this.packet=e,this.offset=s,this.packetLength=t,this.port=o,this.host=n}},createSocket:function(e){return this.type=e,this.socket}},n={gzip:function(e,s){return n.uncompressed=e,this.shouldError?void s({stack:"oh noes"}):void(t?s(null,{length:t}):s(null,"I've been compressed"))}},a={error:function(e){this.message=e}},u={layout:function(e,s){return this.type=e,this.options=s,realLayouts.messagePassThroughLayout},messagePassThroughLayout:realLayouts.messagePassThroughLayout},i=sandbox.require("../lib/appenders/gelf",{requires:{dgram:r,zlib:n,"../layouts":u},globals:{process:{on:function(e,s){"exit"===e&&(o=s)}},console:a}});return log4js.clearAppenders(),log4js.addAppender(i.configure(e||{}),s||"gelf-test"),{dgram:r,compress:n,exitHandler:o,console:a,layouts:u,logger:log4js.getLogger(s||"gelf-test")}};vows.describe("log4js gelfAppender").addBatch({"with default gelfAppender settings":{topic:function(){var e=setupLogging();return e.logger.info("This is a test"),e},"the dgram packet":{topic:function(e){return e.dgram},"should be sent via udp to the localhost gelf server":function(e){assert.equal(e.type,"udp4"),assert.equal(e.socket.host,"localhost"),assert.equal(e.socket.port,12201),assert.equal(e.socket.offset,0),assert.ok(e.socket.packetLength>0,"Received blank message")},"should be compressed":function(e){assert.equal(e.socket.packet,"I've been compressed")}},"the uncompressed log message":{topic:function(e){var s=JSON.parse(e.compress.uncompressed);return s},"should be in the gelf format":function(e){assert.equal(e.version,"1.1"),assert.equal(e.host,require("os").hostname()),assert.equal(e.level,6),assert.equal(e.short_message,"This is a test")}}},"with a message longer than 8k":{topic:function(){var e=setupLogging(void 0,void 0,10240);return e.logger.info("Blah."),e},"the dgram packet":{topic:function(e){return e.dgram},"should not be sent":function(e){assert.equal(e.sent,!1)}}},"with non-default options":{topic:function(){var e=setupLogging({host:"somewhere",port:12345,hostname:"cheese",facility:"nonsense"});return e.logger.debug("Just testing."),e},"the dgram packet":{topic:function(e){return e.dgram},"should pick up the options":function(e){assert.equal(e.socket.host,"somewhere"),assert.equal(e.socket.port,12345)}},"the uncompressed packet":{topic:function(e){var s=JSON.parse(e.compress.uncompressed);return s},"should pick up the options":function(e){assert.equal(e.host,"cheese"),assert.equal(e._facility,"nonsense")}}},"on process.exit":{topic:function(){var e=setupLogging();return e.exitHandler(),e},"should close open sockets":function(e){assert.isTrue(e.dgram.socket.closed)}},"on zlib error":{topic:function(){var e=setupLogging();return e.compress.shouldError=!0,e.logger.info("whatever"),e},"should output to console.error":function(e){assert.equal(e.console.message,"oh noes")}},"with layout in configuration":{topic:function(){var e=setupLogging({layout:{type:"madeuplayout",earlgrey:"yes, please"}});return e},"should pass options to layout":function(e){assert.equal(e.layouts.type,"madeuplayout"),assert.equal(e.layouts.options.earlgrey,"yes, please")}},"with custom fields options":{topic:function(){var e=setupLogging({host:"somewhere",port:12345,hostname:"cheese",facility:"nonsense",customFields:{_every1:"Hello every one",_every2:"Hello every two"}}),s={GELF:!0,_every2:"Overwritten!",_myField:"This is my field!"};return e.logger.debug(s,"Just testing."),e},"the dgram packet":{topic:function(e){return e.dgram},"should pick up the options":function(e){assert.equal(e.socket.host,"somewhere"),assert.equal(e.socket.port,12345)}},"the uncompressed packet":{topic:function(e){var s=JSON.parse(e.compress.uncompressed);return s},"should pick up the options":function(e){assert.equal(e.host,"cheese"),assert.isUndefined(e.GELF),assert.equal(e._facility,"nonsense"),assert.equal(e._every1,"Hello every one"),assert.equal(e._every2,"Overwritten!"),assert.equal(e._myField,"This is my field!"),assert.equal(e.short_message,"Just testing.")}}}})["export"](module);