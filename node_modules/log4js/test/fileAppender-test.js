"use strict";function remove(e){try{fs.unlinkSync(e)}catch(s){}}var vows=require("vows"),fs=require("fs"),path=require("path"),sandbox=require("sandboxed-module"),log4js=require("../lib/log4js"),assert=require("assert"),zlib=require("zlib"),EOL=require("os").EOL||"\n";log4js.clearAppenders(),vows.describe("log4js fileAppender").addBatch({"adding multiple fileAppenders":{topic:function(){for(var e,s=process.listeners("exit").length,t=(log4js.getLogger("default-settings"),5);t--;)e=path.join(__dirname,"/fa-default-test"+t+".log"),log4js.addAppender(require("../lib/appenders/file").appender(e),"default-settings");return s},"does not add more than one `exit` listeners":function(e){assert.ok(process.listeners("exit").length<=e+1)}},"exit listener":{topic:function(){for(var e,s=[],t=sandbox.require("../lib/appenders/file",{globals:{process:{on:function(s,t){e=t}}},requires:{"../streams":{RollingFileStream:function(e){s.push(e),this.end=function(){s.shift()},this.on=function(){}}}}}),i=0;5>i;i+=1)t.appender("test"+i,null,100);return assert.isNotEmpty(s),e(),s},"should close all open files":function(e){assert.isEmpty(e)}},"with default fileAppender settings":{topic:function(){var e=this,s=path.join(__dirname,"/fa-default-test.log"),t=log4js.getLogger("default-settings");remove(s),log4js.clearAppenders(),log4js.addAppender(require("../lib/appenders/file").appender(s),"default-settings"),t.info("This should be in the file."),setTimeout(function(){fs.readFile(s,"utf8",e.callback)},100)},"should write log messages to the file":function(e,s){assert.include(s,"This should be in the file."+EOL)},"log messages should be in the basic layout format":function(e,s){assert.match(s,/\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}\] \[INFO\] default-settings - /)}},"fileAppender subcategories":{topic:function(){function e(e){var s=path.join(__dirname,"/fa-subcategories-test-"+e.join("-").replace(/\./g,"_")+".log");return remove(s),log4js.addAppender(require("../lib/appenders/file").appender(s),e),s}var s=this;log4js.clearAppenders();var t=e(["sub1"]),i=e(["sub1.sub12","sub1.sub13"]),o=e(["sub1.sub12"]),n=log4js.getLogger("sub1.sub12.sub123"),a=log4js.getLogger("sub1.sub13.sub133"),l=log4js.getLogger("sub1.sub14"),r=log4js.getLogger("sub2");n.info("sub1_sub12_sub123"),a.info("sub1_sub13_sub133"),l.info("sub1_sub14"),r.info("sub2"),setTimeout(function(){s.callback(null,{file_sub1:fs.readFileSync(t).toString(),file_sub1_sub12$sub1_sub13:fs.readFileSync(i).toString(),file_sub1_sub12:fs.readFileSync(o).toString()})},3e3)},"check file contents":function(e,s){assert.match(s.file_sub1,/^(\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}\] \[INFO\] (sub1.sub12.sub123 - sub1_sub12_sub123|sub1.sub13.sub133 - sub1_sub13_sub133|sub1.sub14 - sub1_sub14)[\s\S]){3}$/),assert.ok(s.file_sub1.match(/sub123/)&&s.file_sub1.match(/sub133/)&&s.file_sub1.match(/sub14/)),assert.ok(!s.file_sub1.match(/sub2/)),assert.match(s.file_sub1_sub12$sub1_sub13,/^(\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}\] \[INFO\] (sub1.sub12.sub123 - sub1_sub12_sub123|sub1.sub13.sub133 - sub1_sub13_sub133)[\s\S]){2}$/),assert.ok(s.file_sub1_sub12$sub1_sub13.match(/sub123/)&&s.file_sub1_sub12$sub1_sub13.match(/sub133/)),assert.ok(!s.file_sub1_sub12$sub1_sub13.match(/sub14|sub2/)),assert.match(s.file_sub1_sub12,/^(\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}\] \[INFO\] (sub1.sub12.sub123 - sub1_sub12_sub123)[\s\S]){1}$/),assert.ok(!s.file_sub1_sub12.match(/sub14|sub2|sub13/))}},"with a max file size and no backups":{topic:function(){var e=path.join(__dirname,"/fa-maxFileSize-test.log"),s=log4js.getLogger("max-file-size"),t=this;remove(e),remove(e+".1"),log4js.clearAppenders(),log4js.addAppender(require("../lib/appenders/file").appender(e,log4js.layouts.basicLayout,100,0),"max-file-size"),s.info("This is the first log message."),s.info("This is an intermediate log message."),s.info("This is the second log message."),setTimeout(function(){fs.readFile(e,"utf8",t.callback)},100)},"log file should only contain the second message":function(e,s){assert.include(s,"This is the second log message."),assert.equal(s.indexOf("This is the first log message."),-1)},"the number of files":{topic:function(){fs.readdir(__dirname,this.callback)},"starting with the test file name should be two":function(e,s){var t=s.filter(function(e){return e.indexOf("fa-maxFileSize-test.log")>-1});assert.equal(t.length,2)}}},"with a max file size and 2 backups":{topic:function(){var e=path.join(__dirname,"/fa-maxFileSize-with-backups-test.log"),s=log4js.getLogger("max-file-size-backups");remove(e),remove(e+".1"),remove(e+".2"),log4js.clearAppenders(),log4js.addAppender(require("../lib/appenders/file").appender(e,log4js.layouts.basicLayout,50,2),"max-file-size-backups"),s.info("This is the first log message."),s.info("This is the second log message."),s.info("This is the third log message."),s.info("This is the fourth log message.");var t=this;setTimeout(function(){fs.readdir(__dirname,function(e,s){s?t.callback(null,s.sort()):t.callback(e,s)})},200)},"the log files":{topic:function(e){var s=e.filter(function(e){return e.indexOf("fa-maxFileSize-with-backups-test.log")>-1});return s},"should be 3":function(e){assert.equal(e.length,3)},"should be named in sequence":function(e){assert.deepEqual(e,["fa-maxFileSize-with-backups-test.log","fa-maxFileSize-with-backups-test.log.1","fa-maxFileSize-with-backups-test.log.2"])},"and the contents of the first file":{topic:function(e){fs.readFile(path.join(__dirname,e[0]),"utf8",this.callback)},"should be the last log message":function(e){assert.include(e,"This is the fourth log message.")}},"and the contents of the second file":{topic:function(e){fs.readFile(path.join(__dirname,e[1]),"utf8",this.callback)},"should be the third log message":function(e){assert.include(e,"This is the third log message.")}},"and the contents of the third file":{topic:function(e){fs.readFile(path.join(__dirname,e[2]),"utf8",this.callback)},"should be the second log message":function(e){assert.include(e,"This is the second log message.")}}}},"with a max file size and 2 compressed backups":{topic:function(){var e=path.join(__dirname,"/fa-maxFileSize-with-backups-compressed-test.log"),s=log4js.getLogger("max-file-size-backups");remove(e),remove(e+".1.gz"),remove(e+".2.gz"),log4js.clearAppenders(),log4js.addAppender(require("../lib/appenders/file").appender(e,log4js.layouts.basicLayout,50,2,!0),"max-file-size-backups"),s.info("This is the first log message."),s.info("This is the second log message."),s.info("This is the third log message."),s.info("This is the fourth log message.");var t=this;setTimeout(function(){fs.readdir(__dirname,function(e,s){s?t.callback(null,s.sort()):t.callback(e,s)})},1e3)},"the log files":{topic:function(e){var s=e.filter(function(e){return e.indexOf("fa-maxFileSize-with-backups-compressed-test.log")>-1});return s},"should be 3":function(e){assert.equal(e.length,3)},"should be named in sequence":function(e){assert.deepEqual(e,["fa-maxFileSize-with-backups-compressed-test.log","fa-maxFileSize-with-backups-compressed-test.log.1.gz","fa-maxFileSize-with-backups-compressed-test.log.2.gz"])},"and the contents of the first file":{topic:function(e){fs.readFile(path.join(__dirname,e[0]),"utf8",this.callback)},"should be the last log message":function(e){assert.include(e,"This is the fourth log message.")}},"and the contents of the second file":{topic:function(e){zlib.gunzip(fs.readFileSync(path.join(__dirname,e[1])),this.callback)},"should be the third log message":function(e){assert.include(e.toString("utf8"),"This is the third log message.")}},"and the contents of the third file":{topic:function(e){zlib.gunzip(fs.readFileSync(path.join(__dirname,e[2])),this.callback)},"should be the second log message":function(e){assert.include(e.toString("utf8"),"This is the second log message.")}}}}}).addBatch({configure:{"with fileAppender":{topic:function(){var e,s=require("../lib/log4js");s.configure("./test/log4js.json"),e=s.getLogger("tests"),e.info("this should not be written to the file"),e.warn("this should be written to the file"),fs.readFile("tmp-tests.log","utf8",this.callback)},"should load appender configuration from a json file":function(e,s){assert.include(s,"this should be written to the file"+EOL),assert.equal(s.indexOf("this should not be written to the file"),-1)}}}}).addBatch({"when underlying stream errors":{topic:function(){var e,s,t=sandbox.require("../lib/appenders/file",{globals:{console:{error:function(){e=Array.prototype.slice.call(arguments)}}},requires:{"../streams":{RollingFileStream:function(e){this.end=function(){},this.on=function(e,t){"error"===e&&(s=t)}}}}});return t.appender("test1.log",null,100),s({error:"aargh"}),e},"should log the error to console.error":function(e){assert.isNotEmpty(e),assert.equal(e[0],"log4js.fileAppender - Writing to file %s, error happened "),assert.equal(e[1],"test1.log"),assert.equal(e[2].error,"aargh")}}})["export"](module);