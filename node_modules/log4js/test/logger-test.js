"use strict";var vows=require("vows"),assert=require("assert"),levels=require("../lib/levels"),loggerModule=require("../lib/logger"),Logger=loggerModule.Logger;vows.describe("../lib/logger").addBatch({"constructor with no parameters":{topic:new Logger,"should use default category":function(e){assert.equal(e.category,Logger.DEFAULT_CATEGORY)},"should use TRACE log level":function(e){assert.equal(e.level,levels.TRACE)}},"constructor with category":{topic:new Logger("cheese"),"should use category":function(e){assert.equal(e.category,"cheese")},"should use TRACE log level":function(e){assert.equal(e.level,levels.TRACE)}},"constructor with category and level":{topic:new Logger("cheese","debug"),"should use category":function(e){assert.equal(e.category,"cheese")},"should use level":function(e){assert.equal(e.level,levels.DEBUG)}},isLevelEnabled:{topic:new Logger("cheese","info"),"should provide a level enabled function for all levels":function(e){assert.isFunction(e.isTraceEnabled),assert.isFunction(e.isDebugEnabled),assert.isFunction(e.isInfoEnabled),assert.isFunction(e.isWarnEnabled),assert.isFunction(e.isErrorEnabled),assert.isFunction(e.isFatalEnabled)},"should return the right values":function(e){assert.isFalse(e.isTraceEnabled()),assert.isFalse(e.isDebugEnabled()),assert.isTrue(e.isInfoEnabled()),assert.isTrue(e.isWarnEnabled()),assert.isTrue(e.isErrorEnabled()),assert.isTrue(e.isFatalEnabled())}},"should emit log events":{topic:function(){var e=[],s=new Logger;return s.addListener("log",function(s){e.push(s)}),s.debug("Event 1"),loggerModule.disableAllLogWrites(),s.debug("Event 2"),loggerModule.enableAllLogWrites(),s.debug("Event 3"),e},"when log writes are enabled":function(e){assert.equal(e[0].data[0],"Event 1")},"but not when log writes are disabled":function(e){assert.equal(e.length,2),assert.equal(e[1].data[0],"Event 3")}}}).exportTo(module);