"use strict";var vows=require("vows"),assert=require("assert"),Level=require("../lib/levels"),log4js=require("../lib/log4js"),loggerModule=require("../lib/logger"),Logger=loggerModule.Logger;vows.describe("../lib/logger").addBatch({"creating a new log level":{topic:function(){return Level.forName("DIAG",6e3),new Logger},"should export new log level in levels module":function(e){assert.isDefined(Level.DIAG),assert.equal(Level.DIAG.levelStr,"DIAG"),assert.equal(Level.DIAG.level,6e3)},"should create named function on logger prototype":function(e){assert.isFunction(e.diag)},"should create isLevelEnabled function on logger prototype":function(e){assert.isFunction(e.isDiagEnabled)}},"creating a new log level with underscores":{topic:function(){return Level.forName("NEW_LEVEL_OTHER",6e3),new Logger},"should export new log level to levels module":function(e){assert.isDefined(Level.NEW_LEVEL_OTHER),assert.equal(Level.NEW_LEVEL_OTHER.levelStr,"NEW_LEVEL_OTHER"),assert.equal(Level.NEW_LEVEL_OTHER.level,6e3)},"should create named function on logger prototype in camel case":function(e){assert.isFunction(e.newLevelOther)},"should create named isLevelEnabled function on logger prototype in camel case":function(e){assert.isFunction(e.isNewLevelOtherEnabled)}},"creating log events containing newly created log level":{topic:function(){var e=[],l=new Logger;return l.addListener("log",function(l){e.push(l)}),l.log(Level.forName("LVL1",6e3),"Event 1"),l.log(Level.getLevel("LVL1"),"Event 2"),l.log("LVL1","Event 3"),l.lvl1("Event 4"),l.setLevel(Level.forName("LVL2",7e3)),l.lvl1("Event 5"),e},"should show log events with new log level":function(e){assert.equal(e[0].level.toString(),"LVL1"),assert.equal(e[0].data[0],"Event 1"),assert.equal(e[1].level.toString(),"LVL1"),assert.equal(e[1].data[0],"Event 2"),assert.equal(e[2].level.toString(),"LVL1"),assert.equal(e[2].data[0],"Event 3"),assert.equal(e[3].level.toString(),"LVL1"),assert.equal(e[3].data[0],"Event 4")},"should not be present if min log level is greater than newly created level":function(e){assert.equal(e.length,4)}},"creating a new log level with incorrect parameters":{topic:function(){return log4js.levels.forName(9e3,"FAIL_LEVEL_1"),log4js.levels.forName("FAIL_LEVEL_2"),new Logger},"should fail to create the level":function(e){assert.isUndefined(Level.FAIL_LEVEL_1),assert.isUndefined(Level.FAIL_LEVEL_2)}},"calling log with an undefined log level":{topic:function(){var e=[],l=new Logger;return l.addListener("log",function(l){e.push(l)}),l.log("LEVEL_DOES_NEXT_EXIST","Event 1"),l.log(Level.forName("LEVEL_DOES_NEXT_EXIST"),"Event 2"),e},"should fallback to the default log level (INFO)":function(e){assert.equal(e[0].level.toString(),"INFO"),assert.equal(e[1].level.toString(),"INFO")}},"creating a new level with an existing level name":{topic:function(){var e=[],l=new Logger;return l.addListener("log",function(l){e.push(l)}),l.log(log4js.levels.forName("MY_LEVEL",9e3),"Event 1"),l.log(log4js.levels.forName("MY_LEVEL",8e3),"Event 1"),e},"should override the existing log level":function(e){assert.equal(e[0].level.level,9e3),assert.equal(e[1].level.level,8e3)}}}).exportTo(module);