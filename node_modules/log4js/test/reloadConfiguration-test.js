"use strict";function setupConsoleTest(){var e,n={},o=[];return["trace","debug","log","info","warn","error"].forEach(function(e){n[e]=function(){throw new Error("this should not be called.")}}),e=sandbox.require("../lib/log4js",{globals:{console:n}}),e.clearAppenders(),e.addAppender(function(e){o.push(e)}),{log4js:e,logEvents:o,fakeConsole:n}}var vows=require("vows"),assert=require("assert"),sandbox=require("sandboxed-module");vows.describe("reload configuration").addBatch({"with config file changing":{topic:function(){var e,n,o=[],r=[],t="path/to/log4js.json",s={lastMtime:Date.now(),config:{appenders:[{type:"console",layout:{type:"messagePassThrough"}}],levels:{"a-test":"INFO"}},readFileSync:function(e,n){return assert.equal(e,t),assert.equal(n,"utf8"),JSON.stringify(s.config)},statSync:function(e){if(o.push(e),e===t)return s.lastMtime+=1,{mtime:new Date(s.lastMtime)};throw new Error("no such file")}},a={name:"console",appender:function(){return function(e){r.push(e)}},configure:function(e){return a.appender()}},i=function(e,o){n=e},u=sandbox.require("../lib/log4js",{requires:{fs:s,"./appenders/console":a},globals:{console:a,setInterval:i}});return u.configure("path/to/log4js.json",{reloadSecs:30}),e=u.getLogger("a-test"),e.info("info1"),e.debug("debug2 - should be ignored"),s.config.levels["a-test"]="DEBUG",n(),e.info("info3"),e.debug("debug4"),r},"should configure log4js from first log4js.json found":function(e){assert.equal(e[0].data[0],"info1"),assert.equal(e[1].data[0],"info3"),assert.equal(e[2].data[0],"debug4"),assert.equal(e.length,3)}},"with config file staying the same":{topic:function(){var e,n,o=[],r=0,t=[],s=require("path").normalize(__dirname+"/../lib/log4js.json"),a=new Date,i={config:{appenders:[{type:"console",layout:{type:"messagePassThrough"}}],levels:{"a-test":"INFO"}},readFileSync:function(e,n){return r+=1,assert.isString(e),assert.equal(e,s),assert.equal(n,"utf8"),JSON.stringify(i.config)},statSync:function(e){if(o.push(e),e===s)return{mtime:a};throw new Error("no such file")}},u={name:"console",appender:function(){return function(e){t.push(e)}},configure:function(e){return u.appender()}},l=function(e,o){n=e},c=sandbox.require("../lib/log4js",{requires:{fs:i,"./appenders/console":u},globals:{console:u,setInterval:l}});return c.configure(s,{reloadSecs:3}),e=c.getLogger("a-test"),e.info("info1"),e.debug("debug2 - should be ignored"),n(),e.info("info3"),e.debug("debug4"),[o,t,s,r]},"should only read the configuration file once":function(e){var n=e[3];assert.equal(n,1)},"should configure log4js from first log4js.json found":function(e){var n=e[1];assert.equal(n.length,2),assert.equal(n[0].data[0],"info1"),assert.equal(n[1].data[0],"info3")}},"when config file is removed":{topic:function(){var e,n,o=[],r=0,t=[],s=require("path").normalize(__dirname+"/../lib/log4js.json"),a=(new Date,{config:{appenders:[{type:"console",layout:{type:"messagePassThrough"}}],levels:{"a-test":"INFO"}},readFileSync:function(e,n){return r+=1,assert.isString(e),assert.equal(e,s),assert.equal(n,"utf8"),JSON.stringify(a.config)},statSync:function(e){return this.statSync=function(){throw new Error("no such file")},{mtime:new Date}}}),i={name:"console",appender:function(){return function(e){t.push(e)}},configure:function(e){return i.appender()}},u=function(e,o){n=e},l=sandbox.require("../lib/log4js",{requires:{fs:a,"./appenders/console":i},globals:{console:i,setInterval:u}});return l.configure(s,{reloadSecs:3}),e=l.getLogger("a-test"),e.info("info1"),e.debug("debug2 - should be ignored"),n(),e.info("info3"),e.debug("debug4"),[o,t,s,r]},"should only read the configuration file once":function(e){var n=e[3];assert.equal(n,1)},"should not clear configuration when config file not found":function(e){var n=e[1];assert.equal(n.length,3),assert.equal(n[0].data[0],"info1"),assert.equal(n[1].level.toString(),"WARN"),assert.include(n[1].data[0],"Failed to load configuration file"),assert.equal(n[2].data[0],"info3")}},"when passed an object":{topic:function(){var e=setupConsoleTest();return e.log4js.configure({},{reloadSecs:30}),e.logEvents},"should log a warning":function(e){assert.equal(e[0].level.toString(),"WARN"),assert.equal(e[0].data[0],'Ignoring configuration reload parameter for "object" configuration.')}},"when called twice with reload options":{topic:function(){var e,n,o=require("path").normalize(__dirname+"/../lib/log4js.json"),r={readFileSync:function(e,n){return JSON.stringify({})},statSync:function(e){return{mtime:new Date}}},t={name:"console",appender:function(){return function(e){}},configure:function(e){return t.appender()}},s=!1,a=function(n,o){return e=n,1234},i=sandbox.require("../lib/log4js",{requires:{fs:r,"./appenders/console":t},globals:{console:t,setInterval:a,clearInterval:function(e){s=!0,n=e}}});return i.configure(o,{reloadSecs:3}),i.configure(o,{reloadSecs:15}),{cleared:s,id:n}},"should clear the previous interval":function(e){assert.isTrue(e.cleared),assert.equal(e.id,1234)}}}).exportTo(module);