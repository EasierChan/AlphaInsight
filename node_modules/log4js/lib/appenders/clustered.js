"use strict";function serializeLoggingEvent(e){for(var r=0;r<e.data.length;r++){var t=e.data[r];t&&t.stack&&"{}"===JSON.stringify(t)&&(e.data[r]={stack:t.stack})}return JSON.stringify(e)}function deserializeLoggingEvent(e){var r;try{r=JSON.parse(e),r.startTime=new Date(r.startTime),r.level=log4js.levels.toLevel(r.level.levelStr);for(var t=0;t<r.data.length;t++){var a=r.data[t];a&&a.stack&&(r.data[t]=a.stack)}}catch(s){r={startTime:new Date,categoryName:"log4js",level:log4js.levels.ERROR,data:["Unable to parse log:",e]}}return r}function createAppender(e){if(cluster.isMaster){var r=function(r){if(e.actualAppenders)for(var t=e.actualAppenders.length,a=0;t>a;a++)e.appenders[a].category&&e.appenders[a].category!==r.categoryName||e.actualAppenders[a](r)};return cluster.on("fork",function(e){e.on("message",function(t){if(t.type&&"::log-message"===t.type){var a=deserializeLoggingEvent(t.event);a.pid=e.process.pid,a.cluster={master:process.pid,worker:e.process.pid,workerId:e.id},r(a)}})}),r}return function(e){cluster.isWorker&&process.send({type:"::log-message",event:serializeLoggingEvent(e)})}}function configure(e,r){if(e.appenders&&cluster.isMaster){var t=e.appenders.length;e.actualAppenders=new Array(t);for(var a=0;t>a;a++)log4js.loadAppender(e.appenders[a].type),e.actualAppenders[a]=log4js.appenderMakers[e.appenders[a].type](e.appenders[a],r)}return createAppender(e)}var cluster=require("cluster"),log4js=require("../log4js");exports.appender=createAppender,exports.configure=configure;