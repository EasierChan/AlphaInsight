"use strict";function hasLogger(e){return loggers.hasOwnProperty(e)}function getBufferedLogger(e){var r=getLogger(e),o={};return o.temp=[],o.target=r,o.flush=function(){for(var e=0;e<o.temp.length;e++){var r=o.temp[e];o.target[r.level](r.message),delete o.temp[e]}},o.trace=function(e){o.temp.push({level:"trace",message:e})},o.debug=function(e){o.temp.push({level:"debug",message:e})},o.info=function(e){o.temp.push({level:"info",message:e})},o.warn=function(e){o.temp.push({level:"warn",message:e})},o.error=function(e){o.temp.push({level:"error",message:e})},o.fatal=function(e){o.temp.push({level:"fatal",message:e})},o}function normalizeCategory(e){return e+"."}function doesLevelEntryContainsLogger(e,r){var o=normalizeCategory(e),n=normalizeCategory(r);return n.substring(0,o.length)==o}function doesAppenderContainsLogger(e,r){var o=normalizeCategory(e),n=normalizeCategory(r);return n.substring(0,o.length)==o}function getLogger(e){if("string"!=typeof e&&(e=Logger.DEFAULT_CATEGORY),!hasLogger(e)){var r;if(levels.config)for(var o=Object.keys(levels.config).sort(),n=0;n<o.length;n++){var t=o[n];doesLevelEntryContainsLogger(t,e)&&(r=levels.config[t])}loggers[e]=new Logger(e,r);var g;for(var a in appenders)doesAppenderContainsLogger(a,e)&&(g=appenders[a],g.forEach(function(r){loggers[e].addListener("log",r)}));appenders[ALL_CATEGORIES]&&(g=appenders[ALL_CATEGORIES],g.forEach(function(r){loggers[e].addListener("log",r)}))}return loggers[e]}function addAppender(){var e=Array.prototype.slice.call(arguments),r=e.shift();0!==e.length&&void 0!==e[0]||(e=[ALL_CATEGORIES]),Array.isArray(e[0])&&(e=e[0]),e.forEach(function(e){if(addAppenderToCategory(r,e),e===ALL_CATEGORIES)addAppenderToAllLoggers(r);else for(var o in loggers)doesAppenderContainsLogger(e,o)&&loggers[o].addListener("log",r)})}function addAppenderToAllLoggers(e){for(var r in loggers)hasLogger(r)&&loggers[r].addListener("log",e)}function addAppenderToCategory(e,r){appenders[r]||(appenders[r]=[]),appenders[r].push(e)}function clearAppenders(){appenders={};for(var e in loggers)hasLogger(e)&&loggers[e].removeAllListeners("log")}function configureAppenders(e,r){clearAppenders(),e&&e.forEach(function(e){loadAppender(e.type);var o;e.makers=appenderMakers;try{o=appenderMakers[e.type](e,r),addAppender(o,e.category)}catch(n){throw new Error("log4js configuration problem for "+util.inspect(e),n)}})}function configureLevels(e){if(levels.config=e,e){var r=Object.keys(levels.config).sort();for(var o in r){var n=r[o];n===ALL_CATEGORIES&&setGlobalLogLevel(e[n]);for(var t in loggers)doesLevelEntryContainsLogger(n,t)&&loggers[t].setLevel(e[n])}}}function setGlobalLogLevel(e){Logger.prototype.level=levels.toLevel(e,levels.TRACE)}function getDefaultLogger(){return getLogger(Logger.DEFAULT_CATEGORY)}function loadConfigurationFile(e){return e?JSON.parse(fs.readFileSync(e,"utf8")):void 0}function configureOnceOff(e,r){if(e)try{configureLevels(e.levels),configureAppenders(e.appenders,r),e.replaceConsole?replaceConsole():restoreConsole()}catch(o){throw new Error("Problem reading log4js config "+util.inspect(e)+'. Error was "'+o.message+'" ('+o.stack+")")}}function reloadConfiguration(e){var r=getMTime(configState.filename);r&&(configState.lastMTime&&r.getTime()>configState.lastMTime.getTime()&&configureOnceOff(loadConfigurationFile(configState.filename),e),configState.lastMTime=r)}function getMTime(e){var r;try{r=fs.statSync(configState.filename).mtime}catch(o){getLogger("log4js").warn("Failed to load configuration file "+e)}return r}function initReloadConfiguration(e,r){configState.timerId&&(clearInterval(configState.timerId),delete configState.timerId),configState.filename=e,configState.lastMTime=getMTime(e),configState.timerId=setInterval(reloadConfiguration,1e3*r.reloadSecs,r)}function configure(e,r){var o=e;o=o||process.env.LOG4JS_CONFIG,r=r||{},void 0===o||null===o||"string"==typeof o?(r.reloadSecs&&initReloadConfiguration(o,r),o=loadConfigurationFile(o)||defaultConfig):r.reloadSecs&&getLogger("log4js").warn('Ignoring configuration reload parameter for "object" configuration.'),configureOnceOff(o,r)}function replaceConsole(e){function r(r){return function(){r.apply(e,arguments)}}e=e||getLogger("console"),["log","debug","info","warn","error"].forEach(function(o){console[o]=r("log"===o?e.info:e[o])})}function restoreConsole(){["log","debug","info","warn","error"].forEach(function(e){console[e]=originalConsoleFunctions[e]})}function requireAppender(e){var r;try{r=require("./appenders/"+e)}catch(o){r=require(e)}return r}function loadAppender(e,r){if(r=r||requireAppender(e),!r)throw new Error("Invalid log4js appender: "+util.inspect(e));module.exports.appenders[e]=r.appender.bind(r),r.shutdown&&(appenderShutdowns[e]=r.shutdown.bind(r)),appenderMakers[e]=r.configure.bind(r)}function shutdown(e){loggerModule.disableAllLogWrites();var r,o=0,n=[],t=function(t){r=r||t,o++,o>=n.length&&e(r)};for(var g in appenderShutdowns)appenderShutdowns.hasOwnProperty(g)&&n.push(appenderShutdowns[g]);return n.length?void n.forEach(function(e){e(t)}):e()}var events=require("events"),fs=require("fs"),path=require("path"),util=require("util"),layouts=require("./layouts"),levels=require("./levels"),loggerModule=require("./logger"),LoggingEvent=loggerModule.LoggingEvent,Logger=loggerModule.Logger,ALL_CATEGORIES="[all]",appenders={},loggers={},appenderMakers={},appenderShutdowns={},defaultConfig={appenders:[{type:"console"}],replaceConsole:!1};require("./appenders/console"),levels.forName=function(e,r){var o;if("string"==typeof e&&"number"==typeof r){var n=e.toUpperCase();o=new levels.Level(r,n),loggerModule.addLevelMethods(o)}return o},levels.getLevel=function(e){var r;if("string"==typeof e){e.toUpperCase();r=levels.toLevel(e)}return r};var configState={},originalConsoleFunctions={log:console.log,debug:console.debug,info:console.info,warn:console.warn,error:console.error};module.exports={getBufferedLogger:getBufferedLogger,getLogger:getLogger,getDefaultLogger:getDefaultLogger,hasLogger:hasLogger,addAppender:addAppender,loadAppender:loadAppender,clearAppenders:clearAppenders,configure:configure,shutdown:shutdown,replaceConsole:replaceConsole,restoreConsole:restoreConsole,levels:levels,setGlobalLogLevel:setGlobalLogLevel,layouts:layouts,appenders:{},appenderMakers:appenderMakers,connectLogger:require("./connect-logger").connectLogger},configure();